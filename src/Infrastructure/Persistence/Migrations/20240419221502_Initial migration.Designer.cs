// <auto-generated />
using System;
using System.Collections.Generic;
using CloudHotel.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CloudHotel.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240419221502_Initial migration")]
    partial class Initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CloudHotel.Domain.GuestAggregate.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "CloudHotel.Domain.GuestAggregate.Guest.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(60)")
                                .HasColumnName("AddressCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(60)")
                                .HasColumnName("AddressCountry");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("varchar(30)")
                                .HasColumnName("AddresPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("varchar(60)")
                                .HasColumnName("AddressState");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("AddressStreet");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Document", "CloudHotel.Domain.GuestAggregate.Guest.Document#Document", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("varchar(30)")
                                .HasColumnName("DocumentNumber");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("varchar(30)")
                                .HasColumnName("DocumentType");
                        });

                    b.HasKey("Id");

                    b.ToTable("Guests", (string)null);
                });

            modelBuilder.Entity("CloudHotel.Domain.ReservationAggregate.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Arrival")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Departure")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Arrival");

                    b.HasIndex("Departure");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("CloudHotel.Domain.RoomAggregate.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string[]>("Photos")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("CloudHotel.Domain.ReservationAggregate.Reservation", b =>
                {
                    b.OwnsOne("CloudHotel.Domain.ReservationAggregate.GuestDetails", "Guest", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("GuestId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("GuestName");

                            b1.HasKey("ReservationId");

                            b1.HasIndex("Id");

                            b1.ToTable("Reservations");

                            b1.HasOne("CloudHotel.Domain.GuestAggregate.Guest", null)
                                .WithMany()
                                .HasForeignKey("Id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.OwnsOne("CloudHotel.Domain.ReservationAggregate.RoomDetails", "Room", b1 =>
                        {
                            b1.Property<Guid>("ReservationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("varchar(60)")
                                .HasColumnName("RoomCode");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("RoomId");

                            b1.HasKey("ReservationId");

                            b1.HasIndex("Id");

                            b1.ToTable("Reservations");

                            b1.HasOne("CloudHotel.Domain.RoomAggregate.Room", null)
                                .WithMany()
                                .HasForeignKey("Id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ReservationId");
                        });

                    b.Navigation("Guest")
                        .IsRequired();

                    b.Navigation("Room")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
